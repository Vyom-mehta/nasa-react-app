:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color: white;
  background-color: #030615;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

*{
   padding: 0;
   margin: 0;
   /* The box-sizing property defines how the browser calculates the total size of an element (width + height) when you set its dimensions using width or height.
   
   border-box:

        The width and height include content, padding, and border.
        Padding and border are inside the specified width and height.

   */
   box-sizing: border-box;

   
}


#root{
  display: flex;
  min-height: 100vh;
  position: relative;

}





.imageContainer{
  display: flex;
  flex-direction: column;

  /* Your .imageContainer will take up the full width of its parent container and will be limited in height to the viewport's height (100vh), ensuring it doesn't overflow vertically beyond the visible window. If its content is taller than the viewport, you might need additional styling to handle overflow (e.g., overflow: auto;). */
  
   /* max-height:100vh ; */
   width: 100%; 
}

.bgImage{
    width: 100%;
    height: 100%;
    /* 1 sets the flex-grow factor, meaning the item will grow to fill any available space equally if other sibling items also have flex: 1.
 */
    flex : 1;
    
    /* The image is resized to cover the entire container without leaving empty spaces.
    Parts of the image might be cropped to maintain its aspect ratio */
    object-fit: cover;
}

footer{
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100%;

  /* makws the icon go to the extreme right  */
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;

    padding: 1rem;
}

footer div{
  display: flex;
  flex-direction: column;
}

footer h2{
  font-size: 1.4rem;
}

footer h1{
  font-size: .9rem;
  font-weight: 200;
}

footer button {
  background: transparent;
  border: none;
  outline: none;  color: aliceblue;
  padding: 1rem;
  transition-duration: 200ms;
 
}

footer button i {
  font-size: 1.3rem; 
  cursor: pointer;
}
footer button i:hover{
  opacity: .7;
}


.bgGradient{
  position: absolute;
  /* expand  the full widths of the parent(footer) container   */
  inset: 0;
  z-index: -1;
    background: linear-gradient(to top, #030615, rgba(255, 255, 255, 0));

}


.sidebar{
  position: fixed;
  inset: 0;
  display: flex;
  flex-direction: column;
  z-index: 10;
}

.bgOverly{
  position: absolute;
  inset: 0;
  background: #030615;
  opacity: 0.6;
}

.sidebarContents{
  z-index: 15;
  position: relative;
  display: flex;
  height: 100%;
  width: 80%;
  max-width: 800px;
  margin-left: auto;
  background: #030615;
  
  /* for content directioon */
  display: flex;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  overflow-y: scroll;
}

.sidebarContents div{
  flex: 1;
}

.descriptionTitle{
  font-size: 1.1rem;
  font-weight: 200;
}

.descriptionContainer{
    display: flex;
    flex-direction: column;
    gap:.5rem;
}

.sidebarContents button{
  border: none;
  outline: none;
  background: none;
  color: aliceblue;
  /*sets the btn to the complete left    */
  margin-right:auto;


  padding: 1rem 0 ;
    transition-duration: 200ms;


}

.sidebarContents button i{
    cursor: pointer;

}

.sidebarContents button i:hover{
   opacity: .7;
}

.loadingState{
  /* Why the Element Appears Centered:

    Filling Available Space: By setting flex: 1;, the .loadingState element expands to fill the available space in its parent flex container. This means it takes up as much space as possible, pushing other elements (if any) aside.  */
  display: flex;
  align-items: center;
  justify-content: center;
  flex: 1;
}

.loadingState i {
  opacity: .2;
  font-size: 3rem;
  animation: spin 1s linear infinite ;

}

@keyframes spin{
   from {
    transform: rotate(0deg);
   }

   to{
      transform: rotate(360deg);
   }
}




@media (min-width: 640px) {

  body{
    overflow: hidden;
  }

  .sidebar{
    position: relative;
    /* The inset property is a shorthand for top, right, bottom, and left. By setting it to unset, it restores the initial value, effectively removing any inset offsets
    
    In the media query, inset: unset; removes this positioning, allowing the sidebar to take on the default behavior without any specific top, right, bottom, or left constraints

    the inset: unset effectively restores the default state (which is no inset) in the media query. This allows the sidebar to behave differently on larger screens (relative positioning instead of fixed).
    */
    inset: unset;
    /* Sets the minimum width of the .sidebar to 30% of its parent element's width. It ensures that the sidebar doesn't shrink smaller than this value.

 */
    min-width: 30%;
    /* his means the sidebar will never be taller than the visible area of the browser window. */
    max-height: 100vh;
    box-shadow: 0 0 40px 1px #030615;
  }

  .sidebarContents{
    /* Removes any margin that may have been applied to .sidebarContents by DEFAULT(BROWSER), effectively restoring the initial value(WHICH IS MANUALLY SET !!! ).


    margin: unset ensures that any margin applied earlier (whether from the browser's default or elsewhere) is removed, allowing for more control.

 */
    margin: unset;
    /*  ensuring it takes up the entire width available inside the .sidebar. */
    width: 100%;
  }
  
  .bgOverly{
    right: 0;
    left: unset;
    width: 100vw;
    
    /* myyy */
    height: 100vh;
  }
 
  /* my exp */
  .imageContainer{
    /* overflow-y: auto; */

  }

}



